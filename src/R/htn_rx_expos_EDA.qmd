---
title: "Exploring potential explanations for eligibility drift"
author: "Xing Song"
format: 
  html:
    self-contained: true
editor: visual
execute: 
  echo: false
  message: false
  warning: false
---

```{r}
#| label: load-pkg

# rm(list=ls())
pacman::p_load(
  tidyverse,
  magrittr,
  stringr,
  broom,
  cowplot,
  ggrepel,
  kableExtra,
  gtsummary,
  devtools,
  tableone,
  pROC,
  MASS
)
source_url("https://raw.githubusercontent.com/sxinger/utils/master/analysis_util.R")
source_url("https://raw.githubusercontent.com/sxinger/utils/master/plot_util.R")

path_to_data<-"C:/repos/r61-r33_vccc_kumc/data"
path_to_res<-"C:/repos/r61-r33_vccc_kumc/res"
path_to_ref<-"C:/repos/r61-r33_vccc_kumc/ref"
```

## Clinic BP vs. Home BP at Baseline

Run-in period is defined as the time gap between eligibility clinic visit and baseline visit. 

```{r, warning=F}
#| label: bp-baseline-plot

baseline_aset<-readRDS(file.path(path_to_data,'baseline_aset.rda')) %>%
  mutate(
    RACE_STR = case_when(
      RACE_STR %in% c('white','black','asian','aian','multi') ~ RACE_STR,
      TRUE ~ 'other'
    ),
    RACE_STR = fct_relevel(RACE_STR,'white'),
    ETHN_STR = case_when(
      ETHN_STR == "hispanic" ~ "hispanic",
      TRUE ~ 'non-hispanic'
    ),
    ETHN_STR = fct_relevel(ETHN_STR,'non-hispanic'),
    RACE_ETHN_STR = fct_relevel(RACE_ETHN_STR,'white'),
  )

N<-length(unique(baseline_aset$STUDY_ID))
ggplot(
  baseline_aset %>%
    filter(ELIG_SINCE_INDEX>=-100&ELIG_SINCE_INDEX<=0) %>%
    dplyr::select(STUDY_ID,ELIG_SINCE_INDEX) %>%
    unique,
  aes(x=ELIG_SINCE_INDEX)
)+
  geom_histogram(
    aes(y=..density..),
    binwidth = 2,
    fill="grey",
    color="blue")+
  geom_density(
    aes(y = ..density..),
    color = "red",
    stat = 'density',
    bw = 2,
    size = 1.5) +
  stat_bin(
    aes(y = ..density..,
        label=scales::percent(round(..density..,3))),
    geom='text',
    binwidth=2,
    vjust = 1.5,
    fontface = "bold"
  )+
  scale_x_continuous(
    name = "run-in period duration"
  )+
  scale_y_continuous(
    name = "Percentage (%)",
    breaks = seq(0,0.2,by=0.02),
    labels = seq(0,0.2,by=0.02)*100,
    sec.axis = sec_axis(
      trans = ~ . * N,
      name = "Count",
      breaks = seq(0,40000,by=2000),
      labels = seq(0,40000,by=2000))
  )+
  theme(
    panel.background = element_rect(fill = "white", colour = "grey50"),
    panel.grid.major.y = element_line(colour = "grey"),
    text = element_text(face="bold",size=14)
  )

ggplot(
  baseline_aset %>%
    filter(ELIG_SINCE_INDEX>=-100&ELIG_SINCE_INDEX<=0) %>%
    dplyr::select(STUDY_ID,DELTA_SBP) %>%
    unique,
  aes(x=DELTA_SBP)
)+
  geom_histogram(
    aes(y=..density..),
    binwidth = 2,
    fill="grey",
    color="blue")+
  geom_density(
    aes(y = ..density..),
    color = "red",
    stat = 'density',
    bw = 2,
    size = 1.5) +
  stat_bin(
    aes(y = ..density..,
        label=scales::percent(round(..density..,3))),
    geom='text',
    binwidth=2,
    vjust = 1.5,
    fontface = "bold"
  )+
  scale_x_continuous(
    name = "Delta SBP"
  )+
  scale_y_continuous(
    name = "Percentage (%)",
    breaks = seq(0,0.2,by=0.02),
    labels = seq(0,0.2,by=0.02)*100,
    sec.axis = sec_axis(
      trans = ~ . * N,
      name = "Count",
      breaks = seq(0,40000,by=2000),
      labels = seq(0,40000,by=2000))
  )+
  theme(
    panel.background = element_rect(fill = "white", colour = "grey50"),
    panel.grid.major.y = element_line(colour = "grey"),
    text = element_text(face="bold",size=14)
  )

# ggplot(
#   baseline_aset %>%
#     dplyr::select(STUDY_ID,ELIG_SINCE_INDEX,DELTA_SBP,DELTA_SBP_GROUP,SITE) %>%
#     unique,
#   aes(
#     x = ELIG_SINCE_INDEX,
#     y = DELTA_SBP,
#     color = DELTA_SBP_GROUP
#     )
# )+
#   geom_point()+
#   geom_hline(yintercept=0,linetype=2)+
#   geom_vline(xintercept=0,linetype=2)+
#   geom_vline(xintercept=-30,linetype=2)+
#   geom_vline(xintercept=-60,linetype=2)+
#   geom_vline(xintercept=-90,linetype=2)+
#   labs(
#     x = 'run-in period duration', 
#     y = 'SBP difference', 
#     title = "eligibility and baseline SBP"
#   )+
#   facet_wrap(~ SITE)
# 
# elig_drift<-baseline_aset %>%
#   group_by(SITE) %>%
#   mutate(n_site = length(unique(STUDY_ID))) %>%
#   ungroup %>%
#   group_by(SITE,DELTA_SBP_GROUP,n_site) %>%
#   summarise(cnt = length(unique(STUDY_ID)),.groups='drop') %>%
#   mutate(
#     N = n_site,
#     prop = round(cnt/N,3)
#   ) %>%
#   bind_rows(
#     baseline_aset %>%
#     group_by(DELTA_SBP_GROUP) %>%
#     summarise(cnt = length(unique(STUDY_ID)),.groups='drop') %>%
#     mutate(
#       SITE = 'ALL',
#       N = N,
#       prop = round(cnt/N,3)
#     )
#   ) %>%
#   dplyr::select(SITE,DELTA_SBP_GROUP, N, cnt, prop)
# elig_drift
```

## Investigation: How much of the eligibility drift can be explained by anti-hypertensive medication use during the run-in period?

We set out to investigate what could be some legitimate reasons occured during the run-in period (i.e., the time period between eligibility and recruitment/randomization) to explain this eligibility drift. For this investigation, we also collected all prescription data from CDM PRESCRIBING table provided by KUMC team and identified the following anti-HTN medications (using VA classifications) as well as their timings (start before eligibility visit or during the run-in period):

-   CV100: beta blockers/related

-   CV150: alpha blockers/related

-   CV200: calcium channel blockers

-   CV400: anti-hypertensive combinations

-   CV490: antihypertensive, others

-   CV701: thiazides/related diuretics

-   CV702: loop diuretics

-   CV703: carbonic anhydrase inhibitor diuretics

-   CV704: potassium sparing/combinations diretics

-   CV709: diuretics, other

-   CV800: ACE inhibitors

-   CV805: angiotensin II inhibitor

-   CV806: direct renin inhibitor

### Analysis I: Using systematic explanatory feature screening to investigate what are the explanatory factors for significant BP drop

```{r}
#| label: med-use-segment

baseline_aset<-baseline_aset %>%
  mutate(
    # antihtn_delta_med = case_when(
    #   RUNIN_ST == 1 ~ 'RUNIN_ST',
    #   RUNIN_ADD == 1 ~ 'RUNIN_ADD',
    #   RUNIN_INC == 1 ~ 'RUNIN_INC',
    #   RUNIN_CHANGE == 1 ~ 'RUNIN_CHANGE',
    #   RUNIN_MT == 1 ~ 'RUNIN_MT',
    #   # MED_CNT_IN == 0 ~ 'UNTREATED',
    #   TRUE ~ 'UNEXPLD',
    # ),
    RUNIN_RXUP = case_when(
      RUNIN_ST == 1|RUNIN_ADD == 1|RUNIN_INC == 1|RUNIN_CHANGE == 1 ~ 1,
      TRUE ~ 0,
    ),
    antihtn_delta_med = case_when(
      RUNIN_RXUP == 1 ~ 'RUNIN_RXUP',
      RUNIN_MT == 1 ~ 'RUNIN_MT',
      # MED_CNT_IN == 0 ~ 'UNTREATED',
      TRUE ~ 'UNEXPLD',
    ),
    antihtn_delta_med = fct_relevel(antihtn_delta_med, "UNEXPLD"),
    sig_decr_ind1 = case_when(
      DELTA_SBP_GROUP=='deltasbp1' ~ 1,
      TRUE ~ 0
    ),
    SEX_STR = fct_relevel(SEX_STR, "Male")
  )

CreateTableOne(
  vars = c("DELTA_SBP_GROUP"),
  strata = "antihtn_delta_med" ,
  data = baseline_aset,
  factorVars = c("DELTA_SBP_GROUP")
)

CreateTableOne(
  vars = c("antihtn_delta_med"), 
  strata = "DELTA_SBP_GROUP" , 
  data = baseline_aset, 
  factorVars = c("antihtn_delta_med")
)

CreateTableOne(
  vars = c("DELTA_SBP_BY10_GRP"),
  strata = "antihtn_delta_med" ,
  data = baseline_aset,
  factorVars = c("DELTA_SBP_BY10_GRP")
)

CreateTableOne(
  vars = c("antihtn_delta_med"), 
  strata = "DELTA_SBP_BY10_GRP" , 
  data = baseline_aset, 
  factorVars = c("antihtn_delta_med")
)

CreateTableOne(
  vars = c("delta_sbp_over10"),
  strata = "antihtn_delta_med" ,
  data = baseline_aset,
  factorVars = c("delta_sbp_over10")
)

CreateTableOne(
  vars = c("antihtn_delta_med"), 
  strata = "delta_sbp_over10" , 
  data = baseline_aset, 
  factorVars = c("antihtn_delta_med")
)

CreateTableOne(
  vars = c("delta_sbp_over10_sign"),
  strata = "antihtn_delta_med" ,
  data = baseline_aset,
  factorVars = c("delta_sbp_over10_sign")
)

CreateTableOne(
  vars = c("antihtn_delta_med"), 
  strata = "delta_sbp_over10by10" , 
  data = baseline_aset, 
  factorVars = c("antihtn_delta_med")
)

CreateTableOne(
  vars = c("delta_sbp_over10by10"), 
  strata = "antihtn_delta_med" , 
  data = baseline_aset, 
  factorVars = c("delta_sbp_over10by10")
)
```


#### Univariate filtering

```{r, warning=F, message=F}
#| label: simple-fs-multi-re

varsel<-read.csv(file.path(path_to_ref,"metadata.csv"),stringsAsFactors = F) %>%
  filter(VAR_TYPE %in% c('X',"SDH")) %>%
  filter(!VAR %in% c(
    "BASE_DBP",
    "BASE_HR"
  ))

coef_filter<-data.frame(
  var1=as.character(),
  var2=as.character(),
  or_sigdelta=as.numeric(),
  or_ci_lower=as.numeric(),
  or_ci_upper=as.numeric(),
  or_p_value=as.numeric(),
  coef_delta=as.numeric(),
  coef_ci_lower=as.numeric(),
  coef_ci_upper=as.numeric(),
  coef_p_value=as.numeric()
)

for (vari in varsel$VAR){
  cat("test variable:",vari,"\n")
  
  fit<-glm(
    as.formula(paste0("sig_decr_ind1 ~",vari)),
    data=baseline_aset %>% filter(!is.na(get(vari))&get(vari)!="Inf"),
    family=binomial()
  )
  summ.fit<-summary(fit)
  ci.fit<-confint(fit)
  
  fit2<-glm(
    as.formula(paste0("DELTA_SBP ~",vari)),
    data=baseline_aset %>% filter(!is.na(get(vari))&get(vari)!="Inf"),
    family=gaussian()
  )
  summ.fit2<-summary(fit2)
  ci.fit2<-confint(fit2)
  
  coef_filter<-coef_filter %>%
    add_row(
      var1 = vari,
      var2 = attr(summ.fit$coefficients,"dimnames")[[1]][-1],
      or_sigdelta=exp(summ.fit$coefficients[-1,1]), # note that the coefficient of logistic regression is the log-odds
      or_ci_lower = exp(ci.fit[-1,1]),
      or_ci_upper = exp(ci.fit[-1,2]),
      or_p_value=summ.fit$coefficients[-1,4],
      coef_delta = summ.fit2$coefficients[-1,1],
      coef_ci_lower=ci.fit2[-1,1],
      coef_ci_upper=ci.fit2[-1,2],
      coef_p_value=summ.fit2$coefficients[-1,4]
    )
}
coef_filter<-coef_filter %>% 
  filter(
    or_p_value<0.05 | 
    coef_p_value<0.05 |
    var1 %in% c("antihtn_delta_med")) %>%
  arrange(coef_p_value)

kable(coef_filter)

var_sel<-unique(c(coef_filter$var1,"antihtn_delta_med"))
facvar_sel<-unique(c(var_sel[var_sel %in% varsel$VAR[varsel$VAR_DTYPE=="cat"]],"antihtn_delta_med"))

tbl2a<-CreateTableOne(
  vars = var_sel,
  strata = "sig_decr_ind1" ,
  data = baseline_aset,
  factorVars = facvar_sel
)
kable(
  print(tbl2a, printToggle = FALSE), 
  caption = "Table 2a: Relevant Features stratified by BP Variability Grouping 1"
)

tbl2b<-CreateTableOne(
  vars = var_sel,
  strata = "DELTA_SBP_BY10_GRP",
  data = baseline_aset,
  factorVars = facvar_sel
)
kable(
  print(tbl2b, printToggle = FALSE), 
  caption = "Table 2b: Relevant Features stratified by BP Variability Grouping 2"
)

tbl2c<-CreateTableOne(
  vars = var_sel,
  strata = "delta_sbp_over10",
  data = baseline_aset,
  factorVars = facvar_sel
)
kable(
  print(tbl2c, printToggle = FALSE), 
  caption = "Table 2c: Relevant Features stratified by BP Variability Grouping 3"
)

tbl2d<-CreateTableOne(
  vars = var_sel,
  strata = "delta_sbp_over10by10",
  data = baseline_aset,
  factorVars = facvar_sel
)
kable(
  print(tbl2d, printToggle = FALSE), 
  caption = "Table 2d: Relevant Features stratified by BP Variability Grouping 4"
)

# base_uni<-univar_analysis_mixed(
#   df = baseline_aset,
#   id_col ="STUDY_ID",
#   var_lst = var_sel,
#   grp = baseline_aset$sig_decr_ind1,
#   facvar_lst  = facvar_sel,
#   pretty = T
# )
# base_uni %>%
#   save_kable(
#     file.path(path_to_res,'by_eligdrift.html')
#   )
```


```{r}
#| label: stepwise-reg

sel_aset<-baseline_aset %>%
  replace_na(
    list(
      LAB_CR = 1,
      LAB_AST = 22,
      LAB_HDL = 57,
      LAB_SOD = 140,
      LAB_LDL = 65
    )
  ) %>%
  filter(!is.na(BMI)&!is.na(WT)&!is.na(HT)) %>%
  mutate(
    delta_sbp_over10_sign = as.factor(delta_sbp_over10_sign),
    delta_sbp_over10by10 = as.factor(delta_sbp_over10by10)
  )

var_sel<-c(
  "SEX_STR",
  "WT",
  "antihtn_delta_med",
  "MED_CNT_IN",
  "ELIG_SBP",
  "SMOKER_IND",
  "LAB_AST",
  "LAB_CR",
  "LAB_HDL",
  "LAB_SOD",
  "LAB_LDL",
  "EFI_BLID",
  "EFI_CP",
  "EFI_DEP",
  "EFI_DIZ",
  "EFI_OST",
  "EFI_VALV",
  "EFI_ARTH"
)

# Specify a null model with no predictors
null_model <- glm(
  sig_decr_ind1 ~ 1,
  data = sel_aset, 
  family = binomial()
)

# Specify the full model using all of the potential predictors
full_model <- glm(
  formula(paste0("DELTA_SBP ~ ",paste(var_sel,collapse = "+"))), 
  data = sel_aset, 
  family = gaussian
)

# Use a bi-directional stepwise algorithm to build a parsimonious model
step_model <- step(
  null_model,
  scope = list(lower = null_model, upper = full_model),
  direction = "both"
)

modsumm<-summary(step_model)
with(modsumm, 1 - deviance/null.deviance)

step_model |> 
  tbl_regression(exponentiate = FALSE) |>
  # add_global_p() |>
  modify_header(estimate = "**Coef**")


# ordinal regression 
# Specify a null model with no predictors
null_model <- polr(
  delta_sbp_over10by10 ~ 1,
  data = sel_aset
)

# Specify the full model using all of the potential predictors
full_model <- polr(
  formula(paste0("delta_sbp_over10by10 ~ ",paste(var_sel,collapse = "+"))), 
  data = sel_aset, 
  Hess = TRUE
)

# Use a bi-directional stepwise algorithm to build a parsimonious model
step_model <- step(
  null_model,
  scope = list(lower = null_model, upper = full_model),
  direction = "both",
  
)

# Extract coefficients and standard errors
coefs <- summary(step_model)$coefficients
se <- coefs[, "Std. Error"]
z <- coefs[, "Value"] / se
p <- 2 * (1 - pnorm(abs(z)))  # Two-sided p-values
ordreg<-data.frame(coefs) %>%
  rename(
    std = `Std..Error`,
    coef = Value
  ) %>%
  mutate(
    or = round(exp(coef),3),
    or_lower = round(exp(coef - 1.96*std),3),
    or_upper = round(exp(coef + 1.96*std),3),
    pval = round(p,4)
  )
kable(ordreg)
```

### CKD Testing

```{r}
#| label: ckd-testing-descr

var_ckd<-c(
  # "CKD_TS_NO",
  # "CKD_TS_EITHER",
  # "CKD_TS_BOTH",
  # "CKD_TS_EGFR",
  # "CKD_TS_ACRPCR",
  # "CKD_TS_GRP",
  "MED_CNT_IN",
  "AGE",
  "SEX_STR",
  "RACE_STR",
  "ETHN_STR",
  "ADI_NATRANK",
  "ADI_STATERANK",
  "RUCA_PRIMARY_GRP",
  "RUCA_PRIMARY_NONMETRO_IND",
  "SMOKER_IND",
  "BASE_SBP",
  "BASE_DBP",
  "BMI",
  "CCI_TOTAL",
  "CCI_TOTAL_GRP",
  "EFI_DIA",
  "EGFR_MULTI_IND",
  "ACRPCR_MULTI_IND"
)
facvar_ckd<-var_ckd[!var_ckd %in% c(
  "MED_CNT_IN",
  "AGE",
  "ADI_NATRANK",
  "ADI_STATERANK",
  "BASE_SBP",
  "BASE_DBP",
  "BMI",
  "CCI_TOTAL"
)]

tbl3a<-CreateTableOne(
  data = baseline_aset,
  vars = var_ckd,
  factorVars = facvar_ckd
)
kable(
  print(tbl3a, printToggle = FALSE), 
  caption = "Table 3a: For All VCCC enrolled patients"
)

tbl3b<-CreateTableOne(
  data = baseline_aset,
  vars = var_ckd,
  factorVars = facvar_ckd,
  strata = "CKD_TS_EITHER"
)
kable(
  print(tbl3b, printToggle = FALSE), 
  caption = "Table 3b: W/ vs. Wo/ CKD Testing"
)

tbl3c<-CreateTableOne(
  data = baseline_aset,
  vars = var_ckd,
  factorVars = facvar_ckd,
  strata = "CKD_TS_GRP"
)
kable(
  print(tbl3c, printToggle = FALSE), 
  caption = "Table 3c: Type of CKD Testing"
)
```

### SDH Outcome-wide

```{r, warning=F}
#| label: sdh-outcome-wide

baseline_aset %<>%
  mutate(
    ADI_STATERANK_GRP = case_when(
      ADI_STATERANK %in%  c(1,2,3) ~ 'low',
      ADI_STATERANK %in%  c(4,5,6,7) ~ 'mod',
      ADI_STATERANK %in%  c(8,9,10) ~ 'high',
      TRUE ~ 'unk'
    ),
    ADI_STATERANK_GRP = fct_relevel(ADI_STATERANK_GRP,"low"),
    LAB_EGFR2 = pmin(LAB_EGFR2,100)
  )

var_outcome<-c(
  "BASE_HR","ELIG_DBP","ELIG_SBP",
  "AV_CNT","TH_CNT","ED_CNT","IP_CNT","BMI","MED_CNT_IN","MED_CNT_CLS","POLYRX_IN_GRP",
  c(
    read.csv(file.path(path_to_ref,"metadata.csv"),stringsAsFactors = F) %>%
      filter(grepl("^((LAB_)|(EFI_)|(CCI_)|(CKD_))+",VAR)) %>%
      pull(VAR)
  )
)
facvar_outcome<-var_outcome[grepl("^(EFI_)+",var_outcome)]

tbl4a<-CreateTableOne(
  data = baseline_aset,
  vars = var_outcome,
  factorVars = facvar_outcome,
  strata = "ADI_STATERANK_GRP"
)
kable(
  print(tbl4a, printToggle = FALSE), 
  caption = "Table 4a: Clinical Characteristics by ADI"
)

tbl4b<-CreateTableOne(
  data = baseline_aset,
  vars = var_outcome,
  factorVars = facvar_outcome,
  strata = "RUCA_PRIMARY_NONMETRO_IND"
)
kable(
  print(tbl4b, printToggle = FALSE), 
  caption = "Table 4b: Clinical Characteristics by Rurality"
)
```


#### Enrollment descriptives

```{r, warning=F}
#| label: enrol-descr

var_enrol<-c(
  "AGE",
  "SEX_STR",
  "RACE_STR",
  "ETHN_STR",
  "RACE_ETHN_STR",
  "BMI",
  "ELIG_DBP",
  "ELIG_SBP",
  "MED_CNT_IN",
  "SMOKER_IND",
  "LAB_EGFR2",
  "LAB_URALBCR2",
  "LAB_URPROTCR2",
  "EFI_DIA",
  "LAB_HBA1C",
  "EFI_STROKE",
  "CCI_TOTAL",
  "CCI_TOTAL_GRP",
  "PAYER_TYPE_PRIMARY_GRP"
)

facvar_enrol<-c(
  "SEX_STR",
  "RACE_STR",
  "ETHN_STR",
  "RACE_ETHN_STR",
  "SMOKER_IND",
  "EFI_DIA",
  "EFI_STROKE",
  "CCI_TOTAL_GRP",
  "PAYER_TYPE_PRIMARY_GRP"
)

enrol_aset<-baseline_aset %>% mutate(PRESCREEN_STATUS = "study") %>%
  dplyr::select(!!c("PATID","PRESCREEN_STATUS",var_enrol)) %>%
  bind_rows(
     readRDS(file.path(path_to_data,"unenrol_aset.rda")) %>%
      dplyr::select(!!c("PATID","PRESCREEN_STATUS",var_enrol))
  ) %>%
  mutate(
    LAB_EGFR2 = pmin(LAB_EGFR2,100)
  ) %>%
  mutate(
    AGE_75UP = case_when(
      AGE >= 75 ~ 1,
      TRUE ~ 0
    ),
    AGE_GRP = case_when(
      AGE < 70 & AGE>=65 ~ 'agegrp1',
      AGE < 75 & AGE>=70 ~ 'agegrp2',
      AGE >= 75 ~ 'agegrp3',
      TRUE ~ NA_character_
    ),
    SEX_STR = fct_relevel(SEX_STR, "Male"),
    RACE_STR = case_when(
      RACE_STR %in% c('white','black','asian','aian','multi') ~ RACE_STR,
      TRUE ~ 'other'
    ),
    RACE_STR = fct_relevel(RACE_STR,'white'),
    ETHN_STR = case_when(
      ETHN_STR == "hispanic" ~ "hispanic",
      TRUE ~ 'non-hispanic'
    ),
    ETHN_STR = fct_relevel(ETHN_STR,'non-hispanic'),
    RACE_ETHN_STR = fct_relevel(RACE_ETHN_STR,'white'),
    PAYER_TYPE_PRIMARY_GRP = case_when(PAYER_TYPE_PRIMARY_GRP=="other" ~ "medicare", TRUE ~ PAYER_TYPE_PRIMARY_GRP),
    PAYER_TYPE_PRIMARY_GRP  = fct_relevel(PAYER_TYPE_PRIMARY_GRP,'medicare'),
    BMI_GRP = case_when(
      BMI < 25 ~ 'bmigrp1',
      BMI>=25&BMI<30 ~ 'bmigrp2',
      BMI>=30&BMI<35 ~ 'bmigrp3',
      BMI>=35&BMI<40 ~ 'bmigrp4',
      BMI>=40 ~ 'bmigrp5',
      TRUE ~ 'bmigrp9'
    ),
    ELIG_SBP_GRP = case_when(
      ELIG_SBP>=140&ELIG_SBP<150 ~ 'sbpgrp1',
      ELIG_SBP>=150&ELIG_SBP<160 ~ 'sbpgrp2',
      ELIG_SBP>=160 ~ 'sbpgrp3',
      TRUE ~ NA_character_
    ),
    MED_CNT_IN_GRP = case_when(
      MED_CNT_IN<3 ~ 'ahtcntgrp1',
      TRUE ~ 'ahtcntgrp2'
    ),
    LAB_EGFR2_GRP = case_when(
      LAB_EGFR2>=60 ~ 'egfrgrp1',
      LAB_EGFR2>=45&LAB_EGFR2<60 ~ 'egfrgrp2',
      LAB_EGFR2>=30&LAB_EGFR2<45 ~ 'egfrgrp3',
      LAB_EGFR2>=15&LAB_EGFR2<30 ~ 'egfrgrp4',
      LAB_EGFR2<15 ~ 'egfrgrp5',
      TRUE ~ 'egfrgrp9'
    ),
    LAB_URALBCR2_GRP = case_when(
      LAB_URALBCR2<30 ~ 'uralbcrgrp1',
      LAB_URALBCR2>=30&LAB_URALBCR2<300 ~ 'uralbcrgrp2',
      LAB_URALBCR2>=300 ~ 'uralbcrgrp3',
      TRUE ~ 'uralbcrgrp9'
    ),
    LAB_URPROTCR2_GRP = case_when(
      LAB_URPROTCR2<150 ~ 'urprotcrgrp1',
      LAB_URPROTCR2>=150&LAB_URPROTCR2<500 ~ 'urprotcrgrp2',
      LAB_URPROTCR2>=500 ~ 'urprotcrgrp3',
      TRUE ~ 'urprotcrgrp9'
    ),
    CKD_EGFR = case_when(
      LAB_EGFR2 < 60 ~ 1,
      TRUE ~ 0
    ),
    PU_URPROTCR = case_when(
      LAB_URPROTCR2 > 150 ~ 1,
      TRUE ~ 0
    ),
    ALBU_URALBCR = case_when(
      LAB_URALBCR2 > 30 ~ 1,
      TRUE ~ 0
    ),
    ENROL_IND = case_when(
      PRESCREEN_STATUS=="study" ~ 1,
      TRUE ~ 0
    )
  ) %>%
  filter(!is.na(ELIG_SBP)&!is.na(AGE_GRP))

var_enrol<-c(
  var_enrol,
  "AGE_75UP",
  "AGE_GRP",
  "BMI_GRP",
  "ELIG_SBP_GRP",
  "MED_CNT_IN_GRP",
  "LAB_EGFR2_GRP",
  "LAB_URALBCR2_GRP",
  "LAB_URPROTCR2_GRP",
  "CKD_EGFR",
  "PU_URPROTCR",
  "ALBU_URALBCR"
)
facvar_enrol<-c(
  facvar_enrol,
  "AGE_75UP",
  "AGE_GRP",
  "BMI_GRP",
  "ELIG_SBP_GRP",
  "MED_CNT_IN_GRP",
  "LAB_EGFR2_GRP",
  "LAB_URALBCR2_GRP",
  "LAB_URPROTCR2_GRP",
  "CKD_EGFR",
  "PU_URPROTCR",
  "ALBU_URALBCR"
)

enrol_uni<-univar_analysis_mixed(
  df = enrol_aset,
  id_col ="PATID",
  var_lst = var_enrol,
  grp = enrol_aset$PRESCREEN_STATUS,
  facvar_lst  = facvar_enrol,
  pretty = T
)
enrol_uni %>%
  save_kable(
    file.path(path_to_res,'by_prescreen.html')
  )

tbl5a<-CreateTableOne(
  data = enrol_aset %>% filter(PRESCREEN_STATUS %in% c("study","declin")),
  vars = var_enrol,
  factorVars = facvar_enrol,
  strata = "PRESCREEN_STATUS"
)
kable(
  print(tbl5a, printToggle = FALSE), 
  caption = "Table 5a: Cohort Characteristics of Enrolled vs. Declined"
)

tbl5b<-CreateTableOne(
  data = enrol_aset %>% filter(PRESCREEN_STATUS %in% c("study","inelig")),
  vars = var_enrol,
  factorVars = facvar_enrol,
  strata = "PRESCREEN_STATUS"
)
kable(
  print(tbl5b, printToggle = FALSE), 
  caption = "Table 5b: Cohort Characteristics of Enrolled vs. Ineligible"
)

tbl5c<-CreateTableOne(
  data = enrol_aset %>% filter(PRESCREEN_STATUS %in% c("study","unreach")),
  vars = var_enrol,
  factorVars = facvar_enrol,
  strata = "PRESCREEN_STATUS"
)
kable(
  print(tbl5c, printToggle = FALSE), 
  caption = "Table 5c: Cohort Characteristics of Enrolled vs. Unreachable"
)


var_pre<-c(
  "SEX_STR",
  # "RACE_STR",
  # "ETHN_STR",
  "RACE_ETHN_STR",
  "AGE_GRP",
  "BMI_GRP",
  "ELIG_SBP_GRP",
  "MED_CNT_IN_GRP",
  "LAB_EGFR2_GRP",
  "LAB_URALBCR2_GRP",
  "LAB_URPROTCR2_GRP",
  "EFI_DIA",
  "EFI_STROKE",
  "CCI_TOTAL_GRP",
  "SMOKER_IND",
  "PAYER_TYPE_PRIMARY_GRP"
)

# Specify a null model with no predictors
null_model <- glm(
  ENROL_IND ~ 1,
  data = enrol_aset,
  family = binomial()
)

# Specify the full model using all of the potential predictors
full_model <- glm(
  formula(paste0("ENROL_IND ~ ",paste(var_pre,collapse = "+"))), 
  data = enrol_aset, 
  family = binomial()
)

# Use a bi-directional stepwise algorithm to build a parsimonious model
step_model <- step(
  null_model,
  scope = list(lower = null_model, upper = full_model),
  direction = "both"
)

modsumm<-summary(step_model)
with(modsumm, 1 - deviance/null.deviance)

step_model |> 
  tbl_regression(exponentiate = TRUE)

full_model |> 
  tbl_regression(exponentiate = TRUE)

```
